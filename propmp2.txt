NECESITO HACER QUE EXISTAN ICONOS PREDETERMINADOS EN MI PROYECTO PARA PODERLOS ESCOGER, ESTOS SON MIS COMPONENTES DE TYPESHIFT:

PAGE.TSX:

'use client';

import React, { useState, useEffect } from 'react';
import { getTypesShifts, putTypesShifts, postTypesShifts, deleteTypesShifts } from '@/services/typesShiftService';
import { ITypesShift } from '@/interfaces/typesShift/types-shift';
import { Button } from '@/components/ui/button';
import DataTable from '@/components/typeshifts/DataTableTypeShift';
import { useRouter } from 'next/navigation';
import CreateEditSheet from '@/components/typeshifts/create-edit-typeshift';

const TypeShiftPage: React.FC = () => {
  const [typeShifts, setTypeShifts] = useState<ITypesShift[]>([]);
  const [loading, setLoading] = useState(true);
  const [editingTypeShift, setEditingTypeShift] = useState<ITypesShift | null>(null);
  const [newTypeShift, setNewTypeShift] = useState<Partial<ITypesShift>>({});
  const [isOpen, setIsOpen] = useState(false); // Estado para controlar si la hoja está abierta
  const router = useRouter();

  useEffect(() => {
    fetchTypeShifts();
  }, []);

  const fetchTypeShifts = async () => {
    try {
      const typeshifts = await getTypesShifts();
      setTypeShifts(typeshifts);
      setLoading(false);
    } catch (error) {
      console.error('Error fetching type shifts:', error);
      setLoading(false);
    }
  };

  const handleEdit = (typeShift: ITypesShift) => {
    setEditingTypeShift(typeShift);
    setIsOpen(true); // Abrir la hoja de edición al editar
  };

  const handleUpdate = async (updatedTypeShift: ITypesShift) => {
    try {
      await putTypesShifts(updatedTypeShift);
      fetchTypeShifts();
      setEditingTypeShift(null);
      setIsOpen(false); // Cerrar la hoja de edición al actualizar
    } catch (error) {
      console.error('Error updating type shift:', error);
    }
  };

  const handleDelete = async (typeShift: ITypesShift) => {
    try {
      await deleteTypesShifts(typeShift.id);
      fetchTypeShifts();
    } catch (error) {
      console.error('Error deleting type shift:', error);
    }
  };

  const handlePropOpen = () => {
    setIsOpen(true); // Manejar la apertura de la hoja
  };

  const handleCreate = async (newTypeShift: Partial<ITypesShift>) => {
    try {
      await postTypesShifts(newTypeShift as ITypesShift);
      fetchTypeShifts();
      setNewTypeShift({}); // Limpiar el estado de newTypeShift después de la creación exitosa
      setIsOpen(false); // Cerrar la hoja de creación
    } catch (error) {
      console.error('Error creating type shift:', error);
    }
  };

  const handleClose = () => {
    // Limpiar el estado de edición y cierre de la hoja
    setEditingTypeShift(null);
    setIsOpen(false); // Manejar el cierre de la hoja
  };

  if (loading) return <div>Loading...</div>;

  return (
    <div className="container mx-auto p-4">
      <h1 className="mb-4 text-2xl font-bold">Manage Type of Shifts</h1>

      <DataTable
        data={typeShifts}
        handleEdit={handleEdit}
        handleDelete={handleDelete}
        handlePropOpen={handlePropOpen}
      />
      <CreateEditSheet
        isOpen={isOpen}
        onClose={handleClose}
        onSave={editingTypeShift ? handleUpdate : handleCreate}
        typeShift={editingTypeShift}
      />
    </div>
  );
};

export default TypeShiftPage;


DATATABLETYPESHIFT.TSX:

import React from 'react';
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from '@tanstack/react-table';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { ITypesShift } from '@/interfaces/typesShift/types-shift';
import { ChevronDown, MoreHorizontal } from 'lucide-react';
import { Badge } from '../ui/badge';

interface Props {
  data: ITypesShift[];
  handleEdit: (typeShift: ITypesShift) => void; // Función para editar tipo de turno
  handleDelete: (typeShift: ITypesShift) => void; // Función para eliminar tipo de turno
  handlePropOpen: () => void; // Función para abrir la hoja
}

const DataTable: React.FC<Props> = ({ data, handleEdit, handleDelete, handlePropOpen }) => {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);
  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});
  const [rowSelection, setRowSelection] = React.useState({});

  const columns: ColumnDef<ITypesShift>[] = [
    {
      accessorKey: 'name',
      header: 'Name',
    },
    {
      accessorKey: 'description',
      header: 'Description',
    },
    {
      accessorKey: 'code',
      header: 'Code',
    },
    {
      accessorKey: 'color',
      header: 'Color',
      cell: ({ row }) => (
        <Badge style={{ backgroundColor: `#${row.original.color}`, color: 'white' }}>#{row.original.color}</Badge>
      ),
    },
    {
      accessorKey: 'icon',
      header: 'Icon',
      cell: ({ row }) => (
        <div className="flex items-center">
          <img src={row.original.icon} alt={row.original.name} className="h-6 w-6" />
        </div>
      ),
    },
    {
      id: 'actions',
      header: 'Actions',
      enableHiding: false,
      cell: ({ row }) => {
        const typeShift = row.original;

        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => handleEdit(typeShift)}>Edit</DropdownMenuItem>
              <DropdownMenuItem onClick={() => handleDelete(typeShift)}>Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        );
      },
    },
  ];

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    onColumnFiltersChange: setColumnFilters,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    onColumnVisibilityChange: setColumnVisibility,
    onRowSelectionChange: setRowSelection,
    state: {
      sorting,
      columnFilters,
      columnVisibility,
      rowSelection,
    },
  });

  return (
    <div className="w-full">
      <div className="flex items-center justify-between py-4">
        <Input
          placeholder="Filter data..."
          value={(table.getColumn('name')?.getFilterValue() as string) ?? ''}
          onChange={(event) => table.getColumn('name')?.setFilterValue(event.target.value)}
          className="mr-2 max-w-sm"
        />
        <Button onClick={handlePropOpen}>Create New Type Shift</Button>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow key={row.id} data-state={row.getIsSelected() && 'selected'}>
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>{flexRender(cell.column.columnDef.cell, cell.getContext())}</TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <div className="space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
          >
            Previous
          </Button>
          <Button variant="outline" size="sm" onClick={() => table.nextPage()} disabled={!table.getCanNextPage()}>
            Next
          </Button>
        </div>
      </div>
    </div>
  );
};

export default DataTable;


CREATE-EDIT-TYPESHIFT.TSX:

// pages/typeShifts/CreateEditSheet.tsx
import { useState, useEffect, FC, ChangeEvent } from 'react';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ITypesShift } from '@/interfaces/typesShift/types-shift';
import { Label } from '@radix-ui/react-label';

interface CreateEditSheetProps {
  isOpen: boolean;
  onClose: () => void;
  typeShift?: ITypesShift | null;
  onSave: (typeShift: ITypesShift) => void;
}

const CreateEditSheet: FC<CreateEditSheetProps> = ({ isOpen, onClose, typeShift, onSave }) => {
  const [formValues, setFormValues] = useState<Partial<ITypesShift>>({});

  useEffect(() => {
    if (typeShift) {
      setFormValues(typeShift);
    } else {
      setFormValues({});
    }
  }, [typeShift]);

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    const newValue = name === 'color' ? value.replace('#', '') : value;
    setFormValues((prevValues) => ({
      ...prevValues,
      [name]: newValue,
    }));
  };

  const handleSubmit = () => {
    onSave(formValues as ITypesShift);
  };

  return (
    <Sheet open={isOpen} onOpenChange={onClose}>
      <SheetContent>
        <SheetHeader>
          <SheetTitle>{typeShift ? 'Edit Type Shift' : 'Create New Type Shift'}</SheetTitle>
        </SheetHeader>
        <div className="grid gap-4 py-4">
          <div>
            <Label className="font-semibold text-sm">Name</Label>
            <Input id="name" name="name" placeholder="Name" value={formValues.name ?? ''} onChange={handleChange} />
          </div>
          <div>
            <Label className="font-semibold text-sm">Description</Label>
            <Input
              id="description"
              name="description"
              placeholder="Description"
              value={formValues.description ?? ''}
              onChange={handleChange}
            />
          </div>
          <div>
            <Label className="font-semibold text-sm">Code</Label>
            <Input id="code" name="code" placeholder="Code" value={formValues.code ?? ''} onChange={handleChange} />
          </div>
          <div>
            <Label className="font-semibold text-sm">Color</Label>
            <Input
              type="color"
              id="color"
              name="color"
              placeholder="Color"
              value={`#${formValues.color ?? '000000'}`} // default to black if not set
              onChange={handleChange}
            />
          </div>
          <div>
            <Label className="font-semibold text-sm">Icon</Label>
            <Input id="icon" name="icon" placeholder="Icon" value={formValues.icon ?? ''} onChange={handleChange} />
            {/* // TODO: Add icon picker */}
          </div>
          <Button onClick={handleSubmit}>{typeShift ? 'Update' : 'Create'}</Button>
          <Button onClick={onClose}>Cancel</Button>
        </div>
      </SheetContent>
    </Sheet>
  );
};

export default CreateEditSheet;
