Hola, tengo la siguiente aplicacion de turnos, estos serian los endpoints de la api que seria el backend:

Client:

- GET /api/client: Response:[
  {
    "id": 1,
    "name": "JESUS DAVID BENAVIDES CHICAIZA",
    "studentCode": "220034174",
    "email": "nassicand@udenar.edu.co"
  },
  {
    "id": 2,
    "name": "YORTH HARBIN ORTEGON SANCHEZ",
    "studentCode": "220034001",
    "email": "asdsa@gmail.com"
  }
]
- GET /api/client/{id}
- GET /api/Client/GetByStudentCode/{code}

Shift:

- GET /api/shift: Response [
  {
    "id": 1,
    "numShift": "UR1",
    "dateAttended": null,
    "isAttended": null,
    "isStandby": true,
    "idTypeShift": 1,
    "idClient": 1,
    "idUser": null,
    "atCreated": "2024-06-13T20:25:56.930556"
  }
]
- POST /api/shift: Response {
  "idTypeShift": 0,
  "studentCode": "string",
  "email": "user@example.com"
}
- GET /api/shift/{id}
- DELETE /api/shift/{id} (Este endpoint cambia de true a false un elemento del shift llamado is_active)
- POST /api/shift/NextShift: Body:{
  "idTypeShift": 1,
  "idUser": 1
} Response: {
  "id": 1,
  "numShift": "UR1",
  "dateAttended": "2024-06-15T18:48:08.3519247+00:00",
  "isAttended": null,
  "isStandby": false,
  "idTypeShift": 1,
  "idClient": 1,
  "idUser": 1,
  "atCreated": "2024-06-13T20:25:56.930556"
} (Este endpoint cambia el estado de isStandby a false)
- POST /api/Shift/TakeShift: Body: {
  "id": 1,
  "isAttended": true
} Response: {
  "id": 1,
  "numShift": "UR1",
  "dateAttended": "2024-06-15T18:48:08.351924",
  "isAttended": true,
  "isStandby": false,
  "idTypeShift": 1,
  "idClient": 1,
  "idUser": 1,
  "atCreated": "2024-06-13T20:25:56.930556"
} (Este endpoint cambia el isAttended a True y agrega la fecha de cuando fue atendido)

TypesShift:

- GET /api/TypesShift: Response [
  {
    "id": 1,
    "color": "FF0000",
    "icon": "UrIcon",
    "name": "Urgency",
    "description": "I need a urgent medical appintment",
    "code": "UR"
  }
]
- POST /api/TypesShift: Body: {
  "color": "string",
  "icon": "string",
  "name": "string",
  "description": "string",
  "code": "st"
}

- GET /api/TypesShift/{id}
- PUT /api/TypesShift/{id}
- DELETE /api/TypesShift/{id} (Este endpoint cambia el estado de isactive de true a false)

User:

- GET /api/User: Response: [
  {
    "id": 1,
    "username": "admin",
    "email": "user@example.com"
  }
]

- POST /api/User: Body: {
  "username": "string",
  "password": "string",
  "email": "user@example.com"
}

- GET /api/User/{id}
- PUT /api/User/{id}
- DELETE /api/User/{id} (Este endpoint cambia el estado de isactive de true a false)


POR FAVOR ANALIZO TODO ESTE TEXTO PORQUE AQUI ESTAN TODOS LOS ENPOINTS NECESARIOS, USA ESTOS ENDPOINTS

Por ahora tengo los siguientes elementos del frontend realizado en NextJS usando shadcn: CRUD de shifts de clientes, CRUD de los typeshift y CRUD de user, y ahora estoy haciendo la parte de manejo de los shift para que los USER seleccionen los tipos de shift que deben manejar para atender los SHIFTS de los CLIENTES, me falta que el User pueda darle a NextShift ya l darle NextShift una verificacion de si el usuario fue atendido o no (TakeShift), para que asi pase al otro turno segun el typeshift que esta atendiendo, y por ultimo me falta la interfaz TV para que los clientes vean los turnos en vivo.

Estructura de mi frontend:


�   .dockerignore
�   .env.local
�   .env.local.example
�   .eslintrc.json
�   .gitignore
�   .prettierignore
�   .prettierrc.json
�   arbol.txt
�   arbol2.txt
�   components.json
�   Dockerfile
�   next-env.d.ts
�   next.config.mjs
�   package-lock.json
�   package.json
�   postcss.config.mjs
�   README.md
�   tailwind.config.ts
�   tsconfig.json
�   
+---public
�       next.svg
�       vercel.svg
�       
+---src
    +---app
    �   �   favicon.ico
    �   �   globals.css
    �   �   layout.tsx
    �   �   
    �   +---(home)
    �       �   layout.tsx
    �       �   page.tsx
    �       �   
    �       +---admin
    �       �   �   page.tsx
    �       �   �   
    �       �   +---typeshift
    �       �   �       page.tsx
    �       �   �       
    �       �   +---user
    �       �   �       page.tsx
    �       �   �       
    �       �   +---[id]
    �       �           page.tsx
    �       �           
    �       +---client
    �       �       page.tsx
    �       �       
    �       +---login
    �       �       page.tsx
    �       �       
    �       +---shift
    �           �   page.tsx
    �           �   
    �           +---[id]
    �                   not-found.tsx
    �                   page.tsx
    �                   
    +---components
    �   +---home
    �   �       header.tsx
    �   �       
    �   +---login
    �   �       LoginForm.tsx
    �   �       
    �   +---shifts
    �   �       buttons-grid.tsx
    �   �       create-form.tsx
    �   �       form-dialog.tsx
    �   �       
    �   +---ticket
    �   �       card-extensed.tsx
    �   �       ShapeSeparator.module.css
    �   �       
    �   +---typeshifts
    �   �       create-edit-typeshift.tsx
    �   �       DataTableTypeShift.tsx
    �   �       
    �   +---ui
    �   �       badge.tsx
    �   �       button.tsx
    �   �       card.tsx
    �   �       dialog.tsx
    �   �       dropdown-menu.tsx
    �   �       input.tsx
    �   �       label.tsx
    �   �       scroll-area.tsx
    �   �       sheet.tsx
    �   �       table.tsx
    �   �       
    �   +---user
    �           create-edit-user.tsx
    �           DataTableUser.tsx
    �           
    +---interfaces
    �   +---client
    �   �       client.tsx
    �   �       
    �   +---shift
    �   �       shift.tsx
    �   �       
    �   +---typesShift
    �   �       types-shift.tsx
    �   �       
    �   +---user
    �           user.tsx
    �           
    +---lib
    �       axios.ts
    �       utils.ts
    �       
    +---services
            clientService.ts
            shiftService.ts
            typesShiftService.ts
            userService.ts
            
